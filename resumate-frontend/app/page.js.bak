'use client';

import { useState } from 'react';

export default function Page() {
  const [extractedText, setExtractedText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  async function handleFileChange(e) {
    const file = e.target.files?.[0];
    if (!file) return;
    setError('');
    setExtractedText('');
    if (file.type !== 'application/pdf') {
      setError('Please upload a PDF file.');
      return;
    }
    const formData = new FormData();
    formData.append('file', file);
    setIsLoading(true);
    try {
      const res = await fetch('http://localhost:5000/api/upload', {
        method: 'POST',
        body: formData
      });
      const data = await res.json();
      if (!res.ok) {
        throw new Error(data?.error || 'Failed to extract text');
      }
      setExtractedText(data.text || '');
    } catch (err) {
      setError(err.message || 'Something went wrong');
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <main className="flex items-center justify-center min-h-screen p-4">
      <div className="w-full max-w-3xl">
        <div className="text-center mb-8">
          <h1 className="text-3xl sm:text-4xl font-bold tracking-tight">ResuMate – AI Resume Tailor</h1>
          <p className="text-gray-600 mt-2">Upload your PDF resume to extract its text.</p>
        </div>

        <div className="bg-white shadow rounded-xl p-6 sm:p-8">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <label className="inline-block">
              <span className="block text-sm font-medium text-gray-700 mb-2">PDF Resume</span>
              <input
                type="file"
                accept="application/pdf"
                onChange={handleFileChange}
                className="block w-full text-sm text-gray-900 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100"
              />
            </label>
            {isLoading ? (
              <span className="text-indigo-600 text-sm">Extracting…</span>
            ) : (
              <span className="text-gray-400 text-sm">Ready</span>
            )}
          </div>

          {error && (
            <div className="mt-4 rounded-md bg-red-50 p-3 text-sm text-red-700">{error}</div>
          )}

          <div className="mt-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">Extracted Text</label>
            <textarea
              value={extractedText}
              onChange={() => {}}
              placeholder="The extracted text will appear here…"
              rows={14}
              className="w-full rounded-lg border border-gray-200 focus:border-indigo-400 focus:ring-2 focus:ring-indigo-200 outline-none p-4 font-mono text-sm bg-gray-50"
              readOnly
            />
          </div>
        </div>
      </div>
    </main>
  );
}


