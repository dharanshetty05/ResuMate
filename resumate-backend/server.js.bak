const express = require("express");
const cors = require("cors");
const multer = require("multer");
const PDFParser = require("pdf2json");
const fs = require("fs");
const dotenv = require("dotenv");

dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors({
    origin: "http://localhost:3000", // frontend URL
    credentials: true
}));
app.use(express.json());

// Multer setup â€” store PDFs temporarily in /uploads
const upload = multer({ dest: "uploads/" });

// Route 1: Health check
app.get("/", (req, res) => {
    res.send("âœ… ResuMate Backend is running successfully");
});

// Route 2: Handle PDF upload + extract text
app.post("/api/upload", upload.single("file"), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ error: "No file uploaded" });
        }

        const pdfParser = new PDFParser();

        pdfParser.on("pdfParser_dataError", (errData) => {
            console.error("PDF parse error:", errData.parserError);
            fs.unlinkSync(req.file.path); // cleanup
            res.status(500).json({ error: "Failed to extract PDF text" });
        });

        pdfParser.on("pdfParser_dataReady", (pdfData) => {
            try {
                // Extract all text from all pages
                const text = pdfData.Pages.map((page) =>
                    page.Texts.map((t) =>
                        decodeURIComponent(
                            t.R.map((r) => r.T).join("")
                        )
                    ).join(" ")
                ).join("\n\n");

                // Clean up uploaded file
                fs.unlinkSync(req.file.path);

                // Send extracted text to frontend
                res.json({ text });
            } catch (error) {
                fs.unlinkSync(req.file.path);
                res.status(500).json({ error: "Failed to process PDF data" });
            }
        });

        // Start parsing PDF
        pdfParser.loadPDF(req.file.path);
    } catch (error) {
        console.error("Error extracting PDF:", error);
        res.status(500).json({ error: "Unexpected server error" });
    }
});

// Route 3: Mock AI Tailoring (placeholder)
app.post("/api/tailor", async (req, res) => {
    const { resumeText, jobDescription } = req.body;
    res.json({
        tailoredText: `Mock AI response for job: ${jobDescription?.slice(0, 50)}...`
    });
});

// Start server
app.listen(PORT, () => {
    console.log(`ðŸš€ ResuMate backend running on http://localhost:${PORT}`);
});


